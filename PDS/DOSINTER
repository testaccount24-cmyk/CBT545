COMP     TITLE 'PL360 - DOS INTERFACE ROUTINES'
*"The source code for this computer program is placed in the public
* domain and may be used by any party without notice to the copyright
* holder, Stanford University. Stanford University provides no
* support of any kind to this computer program.  Further:
*
* STANFORD MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED.
* BY WAY OF EXAMPLE, BUT NOT LIMITATION, STANFORD MAKES NO
* REPRESENTATIONS OR WARRANTIES OF MERCHANTABILITY OR FITNESS FOR ANY
* PARTICULAR PURPOSE OR THAT THE USE OF THE SOFTWARE WILL NOT INFRINGE
* ANY PATENTS, COPYRIGHTS, TRADEMARKS, OR OTHER RIGHTS. STANFORD SHALL
* NOT BE LIABLE FOR ANY LIABILITY OR DAMAGES WITH RESPECT TO ANY CLAIM
* BY A USER OF THIS COMPUTER PROGRAM OR ANY DERIVATIVES OF THIS
* COMPUTER PROGRAM."
         MACRO
&L       ENTER &FREG,&LREG                                            +
         ENTRY &L                                                     +
         USING &L,15                                                  +
         AIF   (T'&FREG EQ '0').DEF1                                  +
         AIF   (T'&LREG EQ '0').DEF2                                  +
&L       STM   &FREG,&LREG,SAVE                                       +
         AGO   .CONT1                                                 +
.DEF1    AIF   (T'&LREG EQ '0').DEF2                                  +
&L       STM   12,&LREG,SAVE                                          +
         AGO   .CONT1                                                 +
.DEF2    ANOP                                                         +
&L       STM   12,2,SAVE                                              +
.CONT1   ANOP                                                         +
         L     12,=A($PLCOMP)
         USING $PLCOMP,12
         DROP  15
         MEND
         SPACE
         MACRO
&L       EXIT  &FREG,&LREG                                            +
         AIF   (T'&FREG EQ '0').DEF1                                  +
         AIF   (T'&LREG EQ '0').DEF2                                  +
&L       LM    &FREG,&LREG,SAVE                                       +
         AGO   .CONT1                                                 +
.DEF1    AIF   (T'&LREG EQ '0').DEF2                                  +
&L       LM    12,&LREG,SAVE                                          +
         AGO   .CONT1                                                 +
.DEF2    ANOP                                                         +
&L       LM    12,2,SAVE                                              +
.CONT1   ANOP                                                         +
         BR    14
         DROP  12
         MEND
         SPACE
$PLCOMP  CSECT
         SPACE
*  MODIFICATION + FROM TELEDYNE-GEOTECH                               +
*    COURTESY OF                                                      +
*      P. MOONEY (ICONIX)                                             +
*      A. OWEN   (BBN)                                                +
*      R. SUEY   (TELEDYNE-GEOTECH)                                   +
*      D. MILLER (TELEDYNE-GEOTECH)                                   +
*                                                                     +
*  GLOBAL PROCEDURE  SYSINIT(R14);
*    (R13) = SAVE AREA @
*    (R14) = RETURN @
*    UPON RETURN,
*    COMPILATION ID ADDRESS => R1
*    START OF FREE STORAGE => R3
*    END OF FREE STORAGE => R4
         SPACE
SYSINIT  ENTER
         SPACE
*  OPTIONS ARE SET WITH THE UPSI BYTE:
*    // UPSI  LMN
*    WHERE L, M, AND N MAY BE EITHER 1 OR 0:
*    0 - TAKE DEFAULT OPTION
*    1 - REVERSE DEFAULT OPTION
*    AND L APPLIES TO LIST
*        M APPLIES TO LOAD
*        N APPLIES TO DECK
*
*    IF THE UPSI STATEMENT IS NOT USED,
*    // UPSI 000
*    IS ASSUMED
         SPACE
         COMRG                         @ COMM. REGION => R1
         MVC   COMPID(8),0(1)          MOVE IN DATE
         LA    1,23(1)                 @UPSI BYTE => R1
         TM    0(1),X'80'
         BNO   TST2
         MVI   LISTSW,X'00'            SET NOLIST
TST2     TM    0(1),X'40'
         BNO   TST3
         MVI   LOADSW,X'00'            SET NOLOAD
TST3     TM    0(1),X'20'
         BNO   ALLOC
         MVI   DECKSW,X'FF'            SET DECK
         SPACE
ALLOC    LA    1,9(1)
         L     4,0(1)                  @ OF PARTITION END
         L     3,4(1)                  @ OF PL360 PHASE END
         LA    4,1(4)                  ADD 1
         SPACE
         OPEN  SYSIN
         CLI   LISTSW,X'FF'
         BNE   OP2
         OPEN  SYSOUT
         ST    2,PRTBUFA               SAVE @ OF PRINTER BUFFER       +
OP2      CLI   LOADSW,X'FF'
         BNE   OP3
         OPEN  IJSYSLN
         ST    2,GOOUT                 SAVE @ OF OUTPUT AREA
OP3      CLI   DECKSW,X'FF'
         BNE   TIME
         OPEN  SYSPCH
         ST    2,PCHBUFA               SAVE @ OF PUNCH BUFFER         +
TIME     GETIME
         SLL   1,4
         ST    1,TEMP
         ED    TIMEID(6),TEMP
         LA    1,COMPID
         L     2,SAVE+24
         LM    12,0,SAVE
         SR    15,15                   SPECIFY DOS SYSTEM
         BR    14
         DROP  12
         SPACE 2
*  GLOBAL PROCEDURE  SYSTERM(R14);
*    (R13) = @ SAVE AREA
*    (R14) = RETURN @
         SPACE
SYSTERM  ENTER
         CLI   LISTSW,X'FF'
         BNE   CL2
         CLOSE SYSOUT
CL2      CLI   LOADSW,X'FF'
         BNE   CL3
         CLOSE IJSYSLN
CL3      CLI   DECKSW,X'FF'
BNE      EOJ
         CLOSE SYSPCH
EOJ      SR    15,15
         IC    15,LOADSW
         LM    0,2,SAVE+16
         LM    12,14,SAVE
         BR    14
         DROP  12
*  GLOBAL PROCEDURE  READ(R14);
*    (R0) = BUFFER ADDRESS
*    (R13) = @ SAVE AREA
*    (R14) = RETURN @
         SPACE
READ     ENTER ,3                                                     +
         CLI   CPSWITCH,0              ANY $COPY(S) IN PROGRESS?      +
         BNE   READ2                   BRANCH IF SOME                 +
READ0    LR    3,0                     SET DESTINATION BASE           +
         GET   SYSIN                   GET SOURCE BASE IN R2          +
         MVC   0(80,3),0(2)            MOVE CARD IMAGE                +
READ1    CLI   EOF,0
         EXIT  ,3                                                     +
         SPACE
         USING $PLCOMP,12
ENDRDR   MVI   EOF,X'FF'
         B     READ1
READ2    LR    3,0                     SAVE INPUT BUFFER ADDR         +
READ3    LR    1,3                     POINT TO BUFFER AREA           +
         GETSL LIBDTF,(1),ENDCOPY                                     +
         B     READ1                                                  +
ENDCOPY  L     2,CPSTACKC+4            CURRENT STACK TOP ADDR         +
         S     2,CPSTACKC+12           POP STACK                      +
         MVI   CPSWITCH,0              ASSUME STACK EMPTY             +
         LR    0,3                                                    +
         C     2,CPSTACKC              STACK EMPTY?                   +
         BL    READ0                   BRANCH IF SO                   +
         MVI   CPSWITCH,X'FF'          PREVIOUS $COPY IN PROGRESS     +
         ST    2,CPSTACKC+4            UPDATE STACK TOP ADDR          +
         L     1,0(,2)                 GET PREVIOUS ENVIRONMENT       +
         PTSL  LIBDTF,1                RESTORE THAT ENVIRONMENT       +
         B     READ3                                                  +
         DROP  12
         SPACE 2
*  GLOBAL PROCEDURE  WRITE(R14);
*    (R0) = BUFFER @
*    (R13) = SAVE AREA @
*    (R14) = RETURN @
         SPACE
WRITE    ENTER
         CLI   LISTSW,X'FF'            TEST FOR LIST OPTION
         BNE   WRITE1
         LR    2,0                     SET SOURCE STRING BASE         +
         L     1,PRTBUFA               SET DESTINATION BASE           +
         MVC   0(133,1),0(2)           MOVE STRING TO OUTPUT BUFFER   +
         PUT   SYSOUT                  GET @ OF NEXT OUTPUT BUFFER    +
         ST    2,PRTBUFA               SAVE THIS @                    +
WRITE1   EXIT
         SPACE 2
*  GLOBAL PROCEDURE  PUNCH(R14);
*  (R0) = BUFFER @
*    (R13) = SAVE AREA @
*    (R14) = RETURN @
         SPACE
PUNCH    ENTER ,3                                                     +
         LR    3,0                     SAVE STRING SOURCE BASE        +
         CLI   DECKSW,X'FF'            TEST FOR DECK OPTION
         BNE   PUNCH1
         L     1,PCHBUFA               SET DESTINATION BASE           +
         MVI   0(1),C'W'               SET PUNCH POCKET 2             +
         MVC   1(80,1),0(3)            MOVE STRING TO OUTPUT BUFFER   +
         PUT   SYSPCH                  GET @ OF NEXT OUTPUT BUFFER    +
         ST    2,PCHBUFA               SAVE THIS ADDR                 +
PUNCH1   CLI   LOADSW,X'FF'            TEST FOR LOAD OPTION
         BNE   PUNCH2
         LR    0,2
         L     1,GOOUT
         MVC   0(2,1),LNKOUT
         MVC   2(72,1),0(3)            MOVE STRING TO OUTPUT BUFFER   +
         PUT   IJSYSLN
         ST    2,GOOUT                 SAVE NEXT BUFFER @
PUNCH2   EXIT  ,3                                                     +
         SPACE 2
*  GLOBAL PROCEDURE  COPY(R14)                                        +
*    (R0) = ARGUMENT ADDRESS                                          +
*    (R13) = SAVE AREA ADDRESS                                        +
*    (R14) = RETURN ADDRESS                                           +
         SPACE 1                                                      +
         EXTRN LIBDTF                                                 +
         SPACE 1                                                      +
COPY     ENTER ,8                                                     +
         LR    4,0                     SET ADDR OF 1-ST SUBFIELD      +
         LA    4,0(,4)                 CLEAR BITS 0-7 FOR COMPUTATION +
         L     8,CPSTACKC+4            GET STACK TOP ADDR             +
         C     8,CPSTACKC+8            STACK FULL?                    +
         BNL   CPERR1                  BRANCH IF SO                   +
         LA    3,CPERR2                BRANCH ADDR FOR SYNTAX ERROR   +
         CLI   0(4),C'A'               CHAR MUST BE A OR HIGHER       +
         BCR   4,3                     BRANCH IF NOT                  +
         CLI   0(4),C'Z'               ALSO Z OR LOWER                +
         BCR   2,3                     BRANCH IF NOT                  +
         LA    2,1(,4)                 CPSLOOP1 BXLE INDEX            +
         LA    0,1                     CPSLOOP1 BXLE INCR             +
         LA    1,8(,4)                 CPSLOOP1 BXLE LIMIT            +
CPSLOOP1 CLI   0(2),C'('               1-ST SUBFIELD STOP IS LEFT PAR +
         BE    CPST1                   BRANCH IF SO                   +
         CLI   0(2),C'.'               1-ST SUBFIELD STOP IS PERIOD   +
         BE    CPST1                   BRANCH IF SO                   +
         CLI   0(2),C' '               1-ST SUBFIELD STOP IS BLANK    +
         BE    CPST1                   BRANCH IF SO                   +
         CLI   0(2),C'A'               CHAR MUST BE LETTER OR NUMBER  +
         BCR   4,3                     BRANCH IF NOT                  +
         BXLE  2,0,CPSLOOP1                                           +
         BCR   15,3                    1-ST SUBFIELD TOO LONG         +
CPST1    LR    5,2                     POINT TO 1-ST SUBFIELD END     +
         BCTR  5,0                                                    +
         SR    5,4                     SET EX LEN OF 1-ST SUBFIELD    +
         LR    7,12                    ASSUME NO 2-ND SUBFIELD        +
         CLI   0(2),C' '               ASSUMPTION CORRECT?            +
         BE    CPSLCLR                 BRANCH IF SO                   +
         MVI   CPSLOOP2+1,C')'         ASSUME 2-ND SUBFIELD STOP      +
         CLI   0(2),C'('               IS RIGHT PAREN ASSUMPTION TRUE?+
         BE    *+8                     BRANCH IF SO                   +
         MVI   CPSLOOP2+1,C' '         2-ND SUBFIELD STOP IS BLANK    +
         LA    6,1(,2)                 POINT TO START OF 2-ND SUBFIELD+
         LA    2,6                     CPSLOOP2 BXLE INDEX            +
         LA    1,8(,6)                 CPSLOOP2 BXLE LIMIT            +
CPSLOOP2 CLI   0(2),C' ' **MODIFIED**  FIND 2-ND SUBFIELD STOP        +
         BE    CPST2                   BRANCH IF FOUND                +
         CLI   0(2),C'A'               CHAR MUST BE LETTER OR NUMBER  +
         BCR   4,3                     BRANCH IF NOT                  +
         BXLE  2,0,CPSLOOP2                                           +
         BCR   15,3                    2-ND SUBFIELD TOO LONG         +
CPST2    LR    7,2                     POINT TO END OF 2-ND SUBFIELD  +
         BCTR  7,0                                                    +
         SR    7,6                     SET EX LEN OF BOOK NAME        +
CPSLCLR  MVI   CPSLNAME,C' '           CLEAR SUBLIB AND BOOK NAME     +
         MVC   CPSLNAME+1(8),CPSLNAME                                 +
         CR    7,12                    1-ST SUBFIELD A BOOK NAME?     +
         BNE   CPSLFULL                BRANCH IF NOT                  +
         MVI   CPSLNAME,C'P'           SET DEFAULT SUBLIB NAME        +
         LR    1,4                     SET BOOK NAME SOURCE ADDR      +
         EX    5,CPMVCEXB                                             +
         B     CPPNOTE                 GO SAVE $COPY ENVIRONMENT      +
CPSLFULL LTR   5,5                     ONE LETTER IN SUBLIB DEFN?     +
         BCR   7,3                     BRANCH IF MORE THAN 1 CHAR     +
         IC    2,0(,4)                 SET SUBLIB NAME                +
         STC   2,CPSLNAME                                             +
         LR    1,6                     SET BOOK NAME SOURCE ADDR      +
         EX    7,CPMVCEXB                                             +
CPPNOTE  CLI   CPSWITCH,0              A PREVIOUS $COPY IN PROGRESS?  +
         BE    CPFIND                  BRANCH IF NOT                  +
         NTSL  LIBDTF,1                                               +
         ST    1,0(,8)                 STACK PREVIOUS COPY ENVIRONMENT+
         A     8,CPSTACKC+12           INCR STACK TOP ADDR            +
CPFIND   LR    2,8                     COMPUTE $COPY LEVEL NO.        +
         S     2,CPSTACKC                                             +
         SRDL  2,34                                                   +
         D     2,=F'10'                SEPARATE TENS AND ONES         +
         MVI   28-6(4),C'('            OPEN LEVEL COUNT               +
         LA    3,X'F0'(,3)             MAKE TENS A CHARACTER          +
         STC   3,28-6+1(,4)            STORE IT                       +
         LA    2,X'F0'(,2)             MAKE ONES A CHARACTER          +
         STC   2,28-6+2(,4)            STORE IT                       +
         MVI   28-6+3(4),C')'          CLOSE LEVEL COUNT              +
         LA    1,CPSLNAME              FIND SOURCE LIBRARY MEMBER     +
         FNDSL LIBDTF,(1),CPBKGONE                                    +
         ST    8,CPSTACKC+4            UPDATE STACK TOP ADDR          +
         MVI   CPSWITCH,X'FF'          SET $COPY IN PROGRESS SWITCH   +
CPEXIT   EXIT  ,8                                                     +
         SPACE 1                                                      +
         USING $PLCOMP,12                                             +
         SPACE 1                                                      +
CPMVCEXB MVC   CPSLNAME+1,(0),0(1)     **EXECUTED**                   +
CPMVCEXT MVC   28-6+4+18(0,4),0(1)     **EXECUTED**                   +
         SPACE 1                                                      +
CPBKGONE LA    1,CPERRM3               GET ERROR TEXT                 +
         LA    2,L'CPERRM3-1           GET EX LEN OF ERROR TEXT       +
         BAL   3,CPPRTMSG+4                                           +
         CLI   CPSWITCH,0              PREVIOUS ENVIRONMENT WAS SYSIN?+
         BE    CPEXIT                  BRANCH IF SO                   +
         L     8,CPSTACKC+4            GET STACK TOP ADDR             +
         L     1,0(,8)                 RESTORE PREVIOUS $COPY ENV     +
         PTSL  LIBDTF,1                                               +
         B     CPEXIT                                                 +
CPERR1   LA    1,CPERRM1               GET ERROR TEXT                 +
         LA    2,L'CPERRM1-1           GET EX LEN OF ERROR TEXT       +
         B     CPPRTMSG                                               +
CPERR2   LA    1,CPERRM2               GET ERROR TEXT                 +
         LA    2,L'CPERRM2-1           GET EX LEN OF ERROR TEXT       +
CPPRTMSG LA    3,CPEXIT                DEFAULT CPPRTMSG EXIT          +
         MVC   28-6+4(18,4),=CL18' *** COPY ERROR - '  ERROR NOTE     +
         EX    2,CPMVCEXT              MOVE IN ERROR TEXT             +
         BR    3                                                      +
         SPACE 1                                                      +
CPSTACKC DC    A(CPSTACK)              STACK BOTTOM ADDR              +
         DC    A(CPSTACK)              CURRENT STACK TOP ADDR         +
         DC    A(CPSTKLIM)             STACK LIMIT ADDR               +
         DC    F'4'                    LENGTH OF STACK ELEMENT        +
CPSTACK  DC    15F'0'                  START OF 16 ELEMENT STACK      +
CPSTKLIM DC    F'0'                                                   +
CPSWITCH DC    X'0'                    0 = NO COPY INPUT, ELSE X'FF'  +
CPERRM1  DC    CL19'EXCEEDED NEST LIMIT'                              +
CPERRM2  DC    CL6'SYNTAX'                                            +
CPERRM3  DC    CL19'SL MEMBER NOT FOUND'                              +
         DROP  12                                                     +
         SPACE 2                                                      +
*  FUDGEOS IS THE PRIMARY ENTRY POINT FOR THE DOS PL360 COMPILER.  IT
*  MAKES IT APPEAR TO THE COMPILER THAT IT HAS BEEN CALLED BY THE O/S
*  OPERATING SYSTEM.  THUS, THE COMPILER SHOULD ALWAYS BE COMPILED WITH
*  O/S LINKAGE CONVENTIONS
         ENTRY FUDGEOS
FUDGEOS  BALR  12,0
         USING *,12
         LA    13,SAVEA
*  THE FOLLOWING CARD IS NECESSARY, ONLY IF THERE IS NEED FOR         +
         CALL  ONEMU                   INSTRUCTION SET EMULATION      +
         CALL  SEGN001
         LTR   15,15
         BP    BOOTOFF
         EOJ
BOOTOFF  CANCEL
SAVEA    DS    9D
         DROP  12
         SPACE 2
SYSIN    DTFCP DEVADDR=SYSIPT,                                        +X
               EOFADDR=ENDRDR,                                         X
               RDONLY=YES,                                             X
               IOAREA1=CDIN1,                                          X
               IOAREA2=CDIN2,                                          X
               RECSIZE=80,                                            +X
               TYPEFLE=INPUT,                                         +X
               IOREG=(2),                                             +X
               DISK=YES                                               +
SYSPCH   DTFCP DEVADDR=SYSPCH,                                        +X
               TYPEFLE=OUTPUT,                                         X
               IOAREA1=PCOUT1,                                         X
               IOAREA2=PCOUT2,                                         X
               RDONLY=YES,                                             X
               RECSIZE=81,                                            +X
               IOREG=(2),                                             +X
               DISK=YES                                               +
SYSOUT   DTFCP DEVADDR=SYSLST,                                        +X
               IOAREA1=LINE1,                                          X
               IOAREA2=LINE2,                                          X
               RECSIZE=133,                                           +X
               IOREG=(2),                                             +X
               RDONLY=YES,                                             X
               TYPEFLE=OUTPUT,                                        +X
               DISK=YES                                               +
IJSYSLN  DTFCP DEVADDR=SYSLNK,                                        +X
               RECSIZE=74,                                            +X
               RDONLY=YES,                                             X
               DISK=YES,                                              +X
               IOAREA1=GO1,                                            X
               IOAREA2=GO2,                                            X
               TYPEFLE=OUTPUT,                                         X
               IOREG=(2)
         CPMOD DISK=YES,                                              +X
               IOAREA2=YES,                                           +X
               RDONLY=YES,                                            +X
               RETRY=YES,                                             +X
               TYPEFLE=OUTPUT                                         +
SAVE     DS    16F                                                    +
         ORG   *-9                                                    +
CPSLNAME DS    CL9                     SOURCE LIBRARY NAME            +
LISTSW   DC    X'FF'                   DEFAULT OPTIONS -
LOADSW   DC    X'FF'                   'LIST,LOAD,NODECK'
DECKSW   DC    X'00'
TEMP     DS    F
COMPID   DC    C'         '
         DC    C'@'
TIMEID   DC    C' '
         DC    X'2120'
         DC    C':'
         DC    X'2020'
EOF      DC    X'00'
CDIN1    DS    80C
CDIN2    DS    80C
PCOUT1   DS    81C                                                    +
PCOUT2   DS    81C                                                    +
LINE1    DS    133C
LINE2    DS    133C
GO1      DS    74C                                                    +
GO2      DS    74C                                                    +
LNKOUT   DC    X'0148'                 # OF RECS AND LENGTH OF EACH
GOOUT    DS    F                       @ OF NEXT OUTPUT AREA
PRTBUFA  DS    F                       @ OF NEXT PRINT BUFFER         +
PCHBUFA  DS    F                       @ OF NEXT PUNCH BUFFER         +
         LTORG                                                        +
         END
         PRINT NOGEN                                                  +
LIBDTF   DTFSL NOTEPNT=YES,PRIVATE=YES                                +
         CPMOD DISK=YES,                                              +X
               IOAREA2=NO,                                            +X
               RETRY=YES,                                             +X
               TYPEFLE=INPUT                                          +
         LTORG                                                        +
         END   ,                                                      +
