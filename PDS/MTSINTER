         ICTL  1,71,18
P3IO     TITLE ' PL360 COMPILER SYSTEM SUPPORT ROUTINES FOR MTS'
*"The source code for this computer program is placed in the public
* domain and may be used by any party without notice to the copyright
* holder, Stanford University. Stanford University provides no
* support of any kind to this computer program.  Further:
*
* STANFORD MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED.
* BY WAY OF EXAMPLE, BUT NOT LIMITATION, STANFORD MAKES NO
* REPRESENTATIONS OR WARRANTIES OF MERCHANTABILITY OR FITNESS FOR ANY
* PARTICULAR PURPOSE OR THAT THE USE OF THE SOFTWARE WILL NOT INFRINGE
* ANY PATENTS, COPYRIGHTS, TRADEMARKS, OR OTHER RIGHTS. STANFORD SHALL
* NOT BE LIABLE FOR ANY LIABILITY OR DAMAGES WITH RESPECT TO ANY CLAIM
* BY A USER OF THIS COMPUTER PROGRAM OR ANY DERIVATIVES OF THIS
* COMPUTER PROGRAM."
         SPACE
***********************************************************************
*                  SYSTEM LINKAGE ROUTINES                            *
*                 PL360 COMPILER  TO  OS/360                          *
*                  STANFORD UNIVERSITY                                *
*                       MAY 1971                                      *
***********************************************************************
         SPACE
         MACRO
&EP      ENTER
         ENTRY &EP
         USING &EP,15
&EP      STM   GR14,GR12,12(GR13) SAVE LINKAGE AND WORK REGISTERS
         L     12,=A($PLCOMP)     ESTABLISH STANDARD ADDRESSING
         DROP  15
         USING $PLCOMP,12
         LA    GR15,SAVEAREA
         ST    GR13,4(GR15)       SAVE BACK POINTER
         ST    GR15,8(GR13)       SAVE FORWARD POINTER
         LR    GR13,GR15
         MEND
         SPACE
         MACRO
&LABEL   EXIT  &RC=0
&LABEL   L     GR13,4(GR13)       ADDRESS OF CALLING SAVE AREA
         LM    GR14,GR12,12(GR13) PICK UP REGS
         LA    GR15,&RC
         BR    14
         DROP  12
         MEND
         SPACE
         PRINT NOGEN
$PLCOMP  CSECT
LINELEN  EQU   132                SYSOUT LINE LENGTH
COREDEF  EQU   64*4096           DEFAULT STORAGE REQUEST
*        *********************************************
*        *                                           *
*        * GENERAL & FLOATING POINT REGISTER EQUATES *
*        * AND SVC EQUATES.                          *
*        *                                           *
*        *********************************************
GR0      EQU   0
GR1      EQU   1
GR2      EQU   2
GR3      EQU   3
GR4      EQU   4
GR5      EQU   5
GR6      EQU   6
GR7      EQU   7
GR8      EQU   8
GR9      EQU   9
GR10     EQU   10
GR11     EQU   11
GR12     EQU   12
GR13     EQU   13
GR14     EQU   14
GR15     EQU   15
         SPACE 2
FPR0     EQU   0
FPR2     EQU   2
FPR4     EQU   4
FPR6     EQU   6
         SPACE 1
         EJECT
*   GLOBAL PROCEDURE SYSINIT(R14);
*        (R1)  = OS PARAMETER LIST POINTER
*        (R13) = SAVE AREA ADDRESS
*        (R14) = RETURN ADDRESS
*        COMPILATION ID ADDRESS => R1
*        START OF FREE STORAGE => R3
*        END OF FREE STORAGE   => R4
SYSINIT  ENTER
         MVI   LISTSW,X'FF'       SET DEFAULT OPTIONS -.
         MVI   LOADSW,X'FF' 'LIST,LOAD,NODECK,OPT,NOBOLD,NOUNDER'
         MVI   DECKSW,X'F0'
         MVI   OPTSW,X'FF'
         MVI   OVERSW,X'00'
         MVI   EOF,0              INITALIZE END OF FILE FLAG
         L     1,0(,1)            RECOVER OS PARAMETER LIST ADDR
         LR    GR4,GR1            ADDRESS OF LENGTH OF TEXT
         LA    GR3,2(GR1)         ADDRESS OF START OF TEXT
         CALL  KWSCAN,(LENLHT,LHT,EXT,(GR3),RHT,(GR4),KWSWS,0)
         L     GR1,MSGSIZE        GET REQUIRED MSG BUF SIZE.
         LA    GR0,1              NEED MUST HAVE IT...
         L     GR15,GETSPACE
         BALR  GR14,GR15          GO GET IT.
         ST    GR1,MSGBASE        SET THE BASE AND
         ST    GR1,MSGTOP         CURRENT MSG LOCATION.
         STH   GR15,#ERRORS       ZAP ERROR COUNT.
         LA    GR1,=A(SPRINT,SERCOM)
         CALL  CFDUB              SEE IF SPRINT AND SERCOM ARE SAME.
         IF    GR15,Z             ARE THEY?
            MVI   SPSERF,1           Same
         ELSE
            MVI   SPSERF,0           Not same
         ENDIF
         IF    LOADSW,NE,0,CLI    IS LOAD OPTION ON?
            LM    GR0,GR1,UNIT0      YES, SEE IF UNIT 0 HAS
            L     GR15,GDINFO        BEEN SPECIFIED
            BALR  GR14,GR15          GET NON-ZERO RC IF NOT
            IF    GR15,Z             SPECIFIED
               L     GR0,0(GR1)         YES, PICK UP FDUB POINTER
               ST    GR0,LOADFDUB       SAVE FOR WRITES
               SR    GR0,GR0            START SETTING UP TO FREE
               L     GR15,FREESPAC      REGION OBTAINED BY GDINFO
               BALR  GR14,GR15          IT IS GONE NOW
            ELSE
               LA    GR1,LOADNAME       SET UP TO GET A FDUB
               CALL  DESTROY            ZAP ANY PREVIOUS VERSION
               L     GR15,GETFD         FOR -PL360.01
               BALR  GR14,GR15
               ST    GR0,LOADFDUB       SAVE FDUB RETURNED
            ENDIF
         ENDIF
         IF    DECKSW,NE,0,CLI    SEE IF NODECK EXPLICITELY SPECIFIED
            LM    GR0,GR1,SPUNCHN    NO, SEE IF SPUNCH SPECIFIED
            L     GR15,GDINFO
            BALR  GR14,GR15          GO FIND OUT
            IF    GR15,Z             IS RC NON-ZERO?
               L     GR0,0(GR1)         PICK UP FDUB POINTER
               IF    12(GR1),EQ,3,CLI   IS SPUNCH *PUNCH*?
                  IF    DECKSW,NO,X'0F',TM WAS DECK EXPLICITLY SPECI
                     MVI   DECKSW,0           NO, DON'T GO PUNCH A L
                  ENDIF
               ELSE
                  MVI   DECKSW,X'FF'       SET SWITCH FULL ON.
               ENDIF
               SR    GR0,GR0            SET UP TO FREE REGION OBTAIN
               L     GR15,FREESPAC
               BALR  GR14,GR15          GO FREE IT
            ELSE
               TM    DECKSW,X'0F'       WAS DECK EXPLICITLY SPECIFIE
               BNO   INITIO5A           NO, JUST GO ON THEN
               L     GR15,CANREPLY      IS HE INTERACTIVE?
               BALR  GR14,GR15          GO FIND OUT
               LTR   GR15,GR15          TEST RC
               BZ    INITIO6    YES, LET HIM SPECIFY WHEN SPUNCH CAL
               SERCOM 'SPUNCH NOT SPECIFIED, DECK OPTION CANCELED'
INITIO5A       MVI   DECKSW,0
            ENDIF
         ENDIF
INITIO6  LM    GR0,GR1,SCARDS
         CALL  GDINFO
         L     GR2,0(GR1)
         ST    GR2,INFDUB
         ST    GR2,SYSIN
         MVI   COPYSW,0
         SR    GR0,GR0
         CALL  FREESPAC
         LM    GR0,GR1,=A(PGNTEXIT,PGNTSAVE)
         MVI   0(GR1),0
         CALL  PGNTTRP
         CALL  TIME,(SIX,ZERO,INBUFF) GET TIME AND DATE
         MVC   COMPID(8),INBUFF   MOVE TIME
         MVI   COMPID+8,C' '      A BLANK
         MVC   COMPID+9(2),INBUFF+12 AND DAY
         MVC   COMPID+11(3),INBUFF+8 AND MONTH
         MVC   COMPID+14(2),INBUFF+18 AND YEAR
         L     GR1,REGSIZE        THE SIZE OF THE AREA TO BE OBTAINED
         LA    GR2,7(,GR1)
         N     GR2,=X'00FFFFF8'
         ST    GR2,REGSIZE
         L     GR5,=X'00100000'
         SLR   GR6,GR6
         DO    WHILE=(GR2,P)
            IF    GR2,LT,GR5
               LR    GR5,GR2
            ELSEIF  GR6,Z
               BCTR GR2,0
               LA   GR2,0(GR5,GR2)
               N    GR2,=X'00F00000'
            ENDIF
            LA    GR0,1              GetSpace switches
            LR    GR1,GR5
            L     GR15,GETSPACE      ADDRESS OF GETSPACE ROUTINE
            BALR  GR14,GR15          GO GET IT
            L     GR0,0(,GR1)
            ST    GR0,GOTLIST(GR6)
            ST    GR1,GOTLIST+4(GR6)
            LR    GR7,GR1
            SRL   GR7,20
            IF    GR6,Z
               LR    GR8,GR7
            ELSE
               LA    GR8,1(,GR8)
               IF    GR8,NE,GR7
                  DC   H'0'       For now...
               ENDIF
            ENDIF
            SR    GR2,GR5
            LA    GR6,8(,GR6)
         ENDDO
         SLR   GR0,GR0
         ST    GR0,GOTLIST+4(GR6)
         L     GR3,GOTLIST+4
         L     GR4,GOTLIST-4(GR6)
         A     GR4,GOTLIST-8(GR6)
         LR    GR2,GR4
         SR    GR2,GR3
         LA    1,COMPID
         L     GR13,4(GR13)
         LM    GR14,GR0,12(GR13)  PICK UP SOME REGS
         LM    GR5,GR12,40(13)
         LA    15,255(0)          SPECIFY O/S SYSTEM
         BR    14
         EJECT
LHT      DC    AL1(TRACERHT-RHT,TRACEEX-EXT,5),C'PRINT'
         DC    AL1(REGRHT-RHT,REGEX-EXT,6),C'REGION'
         DC    AL1(REGRHT-RHT,REGEX-EXT,4),C'SIZE'
         DC    AL1(RHTRHT-RHT,0,0)
LLHT     EQU   *-LHT
         DS    0H
LENLHT   DC    AL2(LLHT)
RHT      DS    0X
TRACERHT DC    AL1(3,0,1,1)  Righthand table for PRINT param
         DC    X'FF'
REGRHT   DC    AL1(4,0,20)   Righthand table for REGION param
         DC    C'/',AL4(1000)
         DC    C'<',AL4(780)
         DC    C'>',AL4(30)
         DC    C'*',AL4(4096)
         DC    X'FF'
RHTRHT   DC    AL1(21,BOLDEX-EXT,6,NOOVEREX-EXT,1),C'BOLD'
         DC    AL1(21,DECKEX-EXT,6,NODECKEX-EXT,1),C'DECK'
         DC    AL1(21,EDITEX-EXT,6,NOEDITEX-EXT,1),C'EDIT'
         DC    AL1(21,LISTEX-EXT,6,NOLISTEX-EXT,2),C'LIST'
         DC    AL1(21,LOADEX-EXT,6,NOLOADEX-EXT,1),C'LOAD'
         DC    AL1(21,OPTEX-EXT,10,NOOPTEX-EXT,1),C'OPTIMIZE'
         DC    AL1(21,TESTEX-EXT,6,NOTESTEX-EXT,1),C'TEST'
         DC    AL1(21,UNDERLEX-EXT,11,NOOVEREX-EXT,1),C'UNDERLINE'
         DC    AL1(21,XREFEX-EXT,6,NOXREFEX-EXT,1),C'XREF'
         DC    X'FF'
         DC    0F'0'
KWSWS    DC    X'00000127'
EXT      DS    0H
LISTEX   MVI   LISTSW,X'FF'
NOLISTEX MVI   LISTSW,0
LOADEX   MVI   LOADSW,X'FF'
NOLOADEX MVI   LOADSW,0
DECKEX   MVI   DECKSW,X'FF'
NODECKEX MVI   DECKSW,0
REGEX    ST    GR2,REGSIZE
TESTEX   MVI   TESTSW,X'FF'
NOTESTEX MVI   TESTSW,0
XREFEX   MVI   XREFSW,X'FF'
NOXREFEX MVI   XREFSW,0
EDITEX   MVI   EDIT,X'0F'
NOEDITEX MVI   EDIT,0
OPTEX    MVI   OPTSW,X'FF'
NOOPTEX  MVI   OPTSW,0
NOOVEREX MVI   OVERSW,0
BOLDEX   MVI   OVERSW,X'80'
UNDERLEX MVI   OVERSW,X'C0'
TRACEEX  BAL   GR5,TRACESET
         SPACE
TRACESET IC    GR4,0(GR2)
         STC   GR4,TRACELEV
         NI    TRACELEV,X'07'
         BR    GR5
         EJECT
*   GLOBAL PROCEDURE SYSTERM(R14);
*        (R13) = SAVE AREA ADDRESS
*        (R14) = RETURN ADDRESS
SYSTERM  ENTER
         CALL  DESTROY,(LOADNAME) DESTROY -PL360.01
         LA    GR3,GOTLIST
         DO
            LM    GR0,GR1,0(GR3)
            LTR   GR1,GR1
            BZ    SYSTERM1
            L     GR15,FREESPAC      ADDRESS OF FREESPACE ROUTINE
            BALR  GR14,GR15
            LA    GR3,8(,GR3)
         ENDDO
SYSTERM1 L     GR1,MSGBASE        GET ERROR MSG AREA BASE
         SR    GR0,GR0            GIVE IT ALL BACK
         L     GR15,FREESPAC
         BALR  GR14,GR15          GO GIVE IT BACK...
         EXIT  RC=4
         EJECT
*   GLOBAL PROCEDURE READ(R14);
*        (R0)  = BUFFER ADDRESS
*        (R13) = SAVE AREA ADDRESS
*        (R14) = RETURN ADDRESS
READ     ENTER
         LR    GR4,GR0            SAVE WHERE TO PUT LINE
         CALL  SETLCL,(=X'7FFFFFFF') RESET LOCAL TIME LIMIT.
         TM    EDIT,X'FF'         SUPPOSED TO EDIT INPUT?
         BZ    READ0              IF NOT, SKIP OUT.
         TM    PARTF,X'FF'        SOMETHING LEFT FROM LAST TIME?
         BO    EDITLN2            IF SO, DON'T READ ANYTHING.
READ0    MVC   INBUFF(80),BLANKS  BLANK THE BUFFER
         CALL  READ#,(INBUFF,INLEN,MODS,LINE#,INFDUB)
         LTR   GR15,GR15          GOT AN EOF?
         BNZ   ENDRDR             IF SO, GO TO END-OF-DATA ROUTINE.
         CLC   =C'$EDIT',INBUFF   AN EDIT DIRECTIVE?
         BNE   READ001            IF NOT, CONTINUE.
         CLI   #COPYS+1,0         ARE WE COPYING?
         BNE   *+12               IF SO, SKIP
         OI    EDIT,X'0F'         SET MAIN EDIT FLAG
         B     READ002            AND GET OUT
         OI    EDIT,X'F0'         ELSE, SET AUX. EDIT FLAG.
         B     READ002            AND GET OUT.
         SPACE 1
READ001  CLC   =C'$NOEDIT',INBUFF STOP EDIT DIRECTIVE?
         BNE   READ002            IF NOT, GO TO CONTINUE.
         CLI   #COPYS+1,0         ARE WE COPING?
         BNE   *+12               IF SO, SKIP
         NI    EDIT,X'F0'         TURN OFF MAIN EDIT FLAG
         B     READ002            AND CONTINUE
         NI    EDIT,X'0F'         TURN OFF AUX. EDIT FLAG
         SPACE 1
READ002  L     GR2,LINE#          GET THE LINE #
         CVD   GR2,CVDWORK        GET IT IN DECIMAL
         MVC   LINENUM(11),EDMASK MOVE MASK INTO PLACE
         ED    LINENUM(11),CVDWORK+3 PRETTY IT UP.
         LTR   GR2,GR2            IS THE LINE # < 0?
         BNM   READ01             IF NOT, SKIP OUT.
         LA    GR2,LINENUM        GET START LOCATION.
         CLI   0(GR2),C' '        IS IT A SPACE?
         BNE   *+12               IF NOT, GO PLACE -
         LA    GR2,1(,GR2)        GET TO NEXT CHAR.
         B     *-12               GO CHECK IT OUT.
         BCTR  GR2,GR0            BACK OFF BY 1
         MVI   0(GR2),C'-'        AND PLACE THE MINUS SIGN.
         SPACE
READ01   MVC   80(10,GR4),LINENUM+1 MOVE LINE# INTO BUFFER.
         LA    GR5,89(,GR4)
READ05   CLI   0(GR5),C'0'
         BNE   READOUT
         MVI   0(GR5),C' '
         BCT   GR5,READ05
READOUT  TM    EDIT,X'FF'         ARE WE IN EDIT MODE?
         BC    5,EDITLINE         IF SO, GO START EDITING.
         MVC   0(80,GR4),INBUFF   ELSE, GIVE RECORD TO COMPILER.
         SPACE
READ1    CALL  SETLCL,(TIMER)
READ1A   CLI   EOF,0              SET CONDITION CODE
         EXIT
         SPACE 3
         USING $PLCOMP,12
         SPACE 1
EDITLINE LA    GR5,255            GET MAX LEN.
         CH    GR5,INLEN          IS THE INPUT TOO LONG?
         BNL   EDITLN1            IF NOT, CONTINUE
         SERCOM '0***INPUT LINE > 255 CHARACTERS'
         CALL  ERROR#             QUIT.
         SPACE 1
EDITLN1  CLI   INLEN+1,72         IS IT A SHORT LINE?
         BH    EDITLN10           IF NOT, WE HAVE TO WORK IT.
         MVC   0(80,GR4),INBUFF   ELSE, PASS IT DIRECTLY
         B     READ1              GO TO RETURN.
         SPACE 1
EDITLN10 LA    GR1,INBUFF         SET UP BUFFER PTR.
         ST    GR1,BUFFADDR       SAVE IT FOR LATER
         MVI   PARTF,X'FF'        INDICATE THAT WE'RE ONLY PAR DONE
         B     *+8                SKIP A BIT.
         SPACE 1
EDITLN2  L     GR1,BUFFADDR       SECONDARY ENTRY -- GET BUFFER PTR.
         LH    GR5,INLEN          GET # OF REMAINING CHARS.
         CLI   INLEN+1,72         DO WE HAVE MORE THAN 72?
         BH    EDITLN3            IF SO, GOT TO BREAK IT DOWN.
         MVI   PARTF,0            SAY NEXT TIME IN, THAT WE READ.
         MVC   0(80,GR4),BLANKS   BLANK THE INPUT BUFFER
         BCTR  GR5,0              GET THE IBM LENGTH
         EX    GR5,INPEDMVC       MOVE IT INTO BUFFER.
         B     READ1              GO TO RETURN.
         SPACE 1
EDITLN3  LR    GR2,GR5            GET POINTER GR SET
         LA    GR5,72             GET 72 INTO COUNTER
         SR    GR2,GR5            POSITION THE PTR
         LA    GR1,72(,GR1)       POSITION THE PTR
         SPACE 1
EDITLN4  CLI   0(GR1),C' '        HAVE WE GOT A BLANK?
         BE    EDITLN6            IF SO, GET OUT
         CLI   0(GR1),C';'        HAVE WE A SEMICOLON?
         BE    EDITLN6            IF SO, GET OUT.
         BCT   GR5,EDITLN5        IF ANYTHING LEFT, CARRY ON
         SERCOM '0***INPUT LINE CAN NOT BE SPLIT***'
         CALL  ERROR#             GIVE UP.
         SPACE 1
EDITLN5  LA    GR2,1(,GR2)        ANOTHER CHAR FOR NEXT TIME
         BCTR  GR1,0              BACKUP TO NEXT CHAR
         B     EDITLN4            GO AND CHECK IT.
         SPACE 1
EDITLN6  LA    GR3,1(,GR1)        POSTION THE BUFFER PTR
         STH   GR2,INLEN          SAVE NO CHARS REMAINING
         L     GR1,BUFFADDR       RETRIEVE OLD BUFFER PTR
         ST    GR3,BUFFADDR       AND SAVE NEW PTR.
         BCTR  GR5,0              GET IBM LENGTH
         MVC   0(80,GR4),BLANKS   BLANK THE BUFFER
         EX    GR5,INPEDMVC       MOVE IT INTO BUFFER.
         B     READ1              GOTO RETURN.
         SPACE 1
INPEDMVC MVC   0(0,GR4),0(GR1)    ****EXECUTED****
         SPACE 1
         DROP  12
         EJECT
*   GLOBAL PROCEDURE SERCOMPR(R14);
*        (R1)  = @MESSAGE.
*        (R13) = @SAVE-AREA
*        (R14) = RETURN ADDRESS
         SPACE 1
SERCOMPR ENTER
         TM    SPSERF,1           ARE SPRINT AND SERCOM THE SAME?
         BO    SERCOMX            IF SO, SKIP OUT
         SERCOM (GR1),H70         WRITE IT TO SERCOM
SERCOMX  EXIT
         EJECT
*   GLOBAL PROCEDURE COPY(R14);
*        (R0) = FILENAME ADDRESS
*        (R13) =  SAVE AREA ADDRESS
*        (R14) = RETURN ADDRESS
         SPACE
COPY     ENTER
         LH    GR5,#COPYS         GET NO. OF CURRENT COPY DIRECTIVES
         LA    GR5,1(,GR5)        INCREMENT BY 1
         CH    GR5,=H'10'         DO WE HAVE MORE THAN 10?
         BNH   COPY1              IF NOT, CONTINUE ALONG
         SERCOM '0***COPY NEST LEVEL > 10***'
         CALL  ERROR#             GO AND GIVE UP
         SPACE 1
COPY1    L     GR2,COPYPTR        GET PTR TO CURRENT SAVE SLOT
         MVC   0(4,GR2),INFDUB    SAVE CURRENT FDUB PTR
         LA    GR2,4(,GR2)        POINT TO NEXT SLOT
         ST    GR2,COPYPTR        AND SAVE IT AWAY.
         STH   GR5,#COPYS         UPDATE NO. CURRENT COPY DIR.
         LR    GR1,GR0            GET FDNAME PTR INTO GR1
         CALL  GETFD              GO GET AN FDUB.
         ST    GR0,INFDUB         SET NEW INPUT FDUB.
COPOUT   EXIT
         SPACE 3
*                  EOD EXIT ROUTINE                                   *
         USING $PLCOMP,12
ENDRDR   CLI   #COPYS+1,0         DO WE HAVE A REAL E-O-F?
         BNE   ENDRDR1            IF NOT, GET BACK LAST INPUT FDUB
         MVI   EOF,X'FF'          SET THE EOF FLAG.
         B     READ1A             GOTO RETURN TO CALLER.
         SPACE 1
ENDRDR1  LH    GR5,#COPYS         GET THE NO OF COPY DIR.
         BCTR  GR5,0              DECR. THEM.
         STH   GR5,#COPYS         AND SAVE IT AWAY.
         NI    EDIT,X'0F'         MAKE SURE AUX. EDIT FLAG IS OFF.
         L     GR2,COPYPTR        GET CURRENT PTR.
         SH    GR2,=H'4'          GET TO LAST FDUB PTR
         ST    GR2,COPYPTR        AND SAVE IT AWAY
         L     GR0,INFDUB         GET READY TO FREE CURRENT INPUT FDUB
         CALL  FREEFD             AND GO DO IT.
         MVC   INFDUB(4),0(GR2)   RESTORE LAST INPUT PTR
         B     READ0              GOTO READ NEXT INPUT RECORD.
         SPACE 1
         DROP  12
         EJECT
*   GLOBAL PROCEDURE ERRBUFFR(R14);
*        (R1)  = @ERRORBUF
*        (R13) = @SAVE-AREA
*        (R14) = RETURN ADDRESS
         SPACE
ERRBUFFR ENTER
         L     GR2,MSGTOP         GET CURRENT SLOT
         MVC   0(32,GR2),0(GR1)   SAVE ERROR MSG AWAY
         LA    GR2,32(,GR2)       GET TO NEXT SLOT.
         ST    GR2,MSGTOP         SAVE NEW LOCN FOR LATER
         LH    GR2,#ERRORS        GET NO. OF ERRORS
         LA    GR2,1(,GR2)        INCREMENT IT AND
         STH   GR2,#ERRORS        SAVE IT AWAY.
         EXIT
         EJECT
*   GLOBAL PROCEDURE ERRPRINT(R14);
*        (R13) = @SAVE-AREA
*        (R14) = RETURN ADDRESS
         SPACE
ERRPRINT ENTER
         LH    GR5,#ERRORS        PICK UP ERROR COUNT
         LTR   GR5,GR5            ARE THERE ANY?
         BNP   ERRPRNTX           IF NOT, GET OUT.
         L     GR2,MSGBASE        GET MSG BUFFER'S BASE
         ST    GR2,MSGTOP         RESET THE CURRENT PTR.
         SPRINT '1     PL360  ERROR  SUMMARY'
         TM    SPSERF,1           NEED SERCOM?
         BO    ERRPRNT0           IF NOT, DON'T
         SERCOM '-     PL360  ERROR  SUMMARY'
ERRPRNT0 SPRINT SUBHEAD,LSUBHEAD
         TM    SPSERF,1
         BO    ERRPRNT1
         SERCOM SUBHEAD,LSUBHEAD
ERRPRNT1 SPRINT ' '
         TM    SPSERF,1           ARE SERCOM AND SPRINT SAME?
         BO    ERRPRNT2           IF SO, SKIP OUT.
         SERCOM ' '
         SPACE 1
ERRPRNT2 MVC   BUFFER(70),BLANKS  BLANK THE BUFFER
         MVC   BUFFER+1(10),0(GR2) GET THE LINE NUMBER.
         MVC   BUFFER+13(6),10(GR2) GET THE CARD NUMBER.
         MVC   BUFFER+22(16),16(GR2) NOW THE ERROR# AND MSG
         SPRINT BUFFER,H70        PRINT IT
         TM    SPSERF,1           NEED IT ON SERCOM?
         BO    ERRPRNT3           IF NOT, SHIP
         SERCOM BUFFER,H70        PRINT IT ON SERCOM.
         SPACE
ERRPRNT3 LA    GR2,32(,GR2)       POINT AT NEXT MSG.
         BCT   GR5,ERRPRNT2       IF MORE, GO BACK.
         B     ERRPRNTX           ELSE, GO TO RETURN.
         SPACE
H70      DC    H'70'
LSUBHEAD DC    Y(L'SUBHEAD)
SUBHEAD  DC    C'0    LINE #  CARD #   ERROR # AND MESSAGE'
         DC    0H'0'
         SPACE
ERRPRNTX STH   GR5,#ERRORS        ZAP THE ERROR COUNT.
         EXIT
         EJECT
*   GLOBAL PROCEDURE WRITE(R14);
*        (R0)  = BUFFER ADDRESS
*        (R13) = SAVE AREA ADDRESS
*        (R14) = RETURN ADDRESS
WRITE    ENTER
         CLI   LISTSW,X'FF'       TEST FOR LIST OPTION
         BNE   WRITE1
         SPRINT (0),OUTLEN
WRITE1   EXIT
         EJECT
*   GLOBAL PROCEDURE PUNCH(R14);
*        (R0)  = BUFFER ADDRESS
*        (R13) = SAVE AREA ADDRESS
*        (R14) = RETURN ADDRESS
PUNCH    ENTER
         LR    2,0
         CLI   LOADSW,X'FF'       TEST FOR LOAD OPTION
         BNE   PUNCH1
         ST    GR0,LOADPAR        STORE AREA ADDRESS
         LA    GR1,LOADPAR        ADDRESS OF PARM LIST
         L     GR15,=V(WRITE#)
         BALR  GR14,GR15          GO WRITE IT OUT
PUNCH1   CLI   DECKSW,X'FF'       TEST FOR DECK OPTION
         BNE   PUNCH2
         LR    0,2
         SPUNCH (0),80
PUNCH2   EXIT
         EJECT
PGNTEXIT ENTER
         CLI   3(GR1),X'0C'       IS EXCEPTION FLOATING POINT OVERFLOW?
         BNER  GR14               NO RETURN TO MTS
         MVI   0(GR1),X'FF'
         MVI   71(GR1),0          SET HIGH ORDER BYTE R15 TO 0
         LM    GR0,GR1,=A(PGNTEXIT,PGNTSAVE)
         CALL  PGNTTRP
         EJECT
WORK     DS    D
NUMBER   DS    D
WLNR     DS    F
FDUB     DS    A
GOTLIST  DS    32F
SAVEAREA DS    18F                SAVE AREA
COMPID   DS    CL16               COMPILATION ID (TIME AND DATE)
LISTSW   DC    X'FF'
TESTSW   DC    X'00'
XREFSW   DC    X'FF'
TRACELEV DC    X'00'
OPTSW    DC    X'00'
OVERSW   DC    X'00'
EDIT     DC    X'00'
PARTF    DC    X'00'
TIMER    DC    A(256*300*2)
CANREPLY DC    V(CANREPLY)
FREEFD   DC    V(FREEFD)
FREESPAC DC    V(FREESPAC)
GDINFO   DC    V(GDINFO)
GETFD    DC    V(GETFD)
GETSPACE DC    V(GETSPACE)
REGSIZE  DC    A(COREDEF)
SPRINT   DC    CL8'SPRINT'
SERCOM   DC    CL8'SERCOM'
MSGSIZE  DC    XL4'00004000'      REALLY IS FAR TO LARGE.
MSGBASE  DS    A                  ERROR MSG BUF'S BASE.
MSGTOP   DS    A                  CURRENT SLOT.
LOADPAR  DC    A(0,LOADLEN,MODS,LINE#,LOADFDUB)
MZERO    DC    F'0'
MODS     DC    F'0'
LINE#    DC    F'0'
UNIT     DC    F'0'
INLEN    DS    H
#COPYS   DC    H'0'
#ERRORS  DC    H'0'               HOLDS ERROR COUNT.
LOADLEN  DC    AL2(80)
OUTLEN   DC    AL2(LINELEN+1)
LOADFDUB DC    A(0)
UNIT0    DC    CL8'0'
SCARDS   DC    CL8'SCARDS'
SPUNCHN  DC    CL8'SPUNCH'
LOADNAME DC    CL16'-PL360.01 '
COPYFDUB DS    A
INFDUB   DS    A
SYSIN    DS    A
PGNTSAVE DS    18A
EOF      DS    X                  SYSIN END-OF-FILE
LOADSW   DS    X                  OBJECT MODULE (SYSGO)
DECKSW   DS    X                  OBJECT MODULE (SYSPUNCH)
COPYSW   DS    X
SWITCH   DS    X
READSW   DS    X'00'
LINEINSW DS    X
SPSERF   DC    X'01'              SAY THAT SERCOM SAME AS SPRINT
LINENUM  DS    CL11
EDMASK   DC    X'402020202021204B202020'
CVDWORK  DS    D
BLANKS   DC    CL80' '
INBUFF   DS    CL256' '
BUFFER   DS    CL255
BUFFADDR DS    A
COPYPTR  DC    A(COPYSTCK)
COPYSTCK DC    10A(0)
SIX      DC    F'6'               FOR TIME - RETURN TIME AND DATE
ZERO     DC    F'0'               FOR TIME - RETURN VALUES, NO ECHO
         END
